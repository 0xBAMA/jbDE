#include "icarusView.h"
#include "icarusData.h"

// Icarus
	// goal is to keep this super, super high level (<250 lines, kind of idea)

class Icarus final : public engineBase {
public:
	Icarus () { Init(); OnInit(); PostInit(); }
	~Icarus () { Quit(); }

	icarusState_t icarusState;
	viewerState_t viewerState;

	void OnInit () {
		ZoneScoped;
		{
			Block Start( "Additional User Init" );

			icarusState.textureManager = &textureManager;

			CompileShaders( icarusState );
			AllocateTextures( icarusState );
			AllocateBuffers( icarusState );

			viewerState.viewerSize = vec2( config.width, config.height );
		}
	}

	void HandleCustomEvents () {
		// application specific controls
		ZoneScoped; scopedTimer Start( "HandleCustomEvents" );

		// click and drag handling
		if ( !ImGui::GetIO().WantCaptureMouse ) {
			viewerState.dragUpdate( inputHandler.mouseDragDelta(), inputHandler.dragging );
		}

		if ( inputHandler.getState4( KEY_R ) == KEYSTATE_RISING ) {
			offsets.clear();
		}

		SDL_Event event;
		SDL_PumpEvents();
		while ( SDL_PollEvent( &event ) ) {
			ImGui_ImplSDL2_ProcessEvent( &event ); // imgui event handling
			pQuit = config.oneShot || // swap out the multiple if statements for a big chained boolean setting the value of pQuit
				( event.type == SDL_QUIT ) ||
				( event.type == SDL_WINDOWEVENT && event.window.event == SDL_WINDOWEVENT_CLOSE && event.window.windowID == SDL_GetWindowID( window.window ) ) ||
				( event.type == SDL_KEYUP && event.key.keysym.sym == SDLK_ESCAPE && SDL_GetModState() & KMOD_SHIFT );
			if ( ( event.type == SDL_KEYUP && event.key.keysym.sym == SDLK_ESCAPE ) || ( event.type == SDL_MOUSEBUTTONDOWN && event.button.button == SDL_BUTTON_X1 ) ) {
				quitConfirm = !quitConfirm; // this has to stay because it doesn't seem like ImGui::IsKeyReleased is stable enough to use
			}

			// handling scrolling
			if ( event.type == SDL_MOUSEWHEEL && !ImGui::GetIO().WantCaptureMouse ) {
				viewerState.scroll( event.wheel.y );
			}
		}
	}

	void ImguiPass () {
		ZoneScoped;

		if ( showProfiler ) {
			static ImGuiUtils::ProfilersWindow profilerWindow; // add new profiling data and render
			profilerWindow.cpuGraph.LoadFrameData( &tasks_CPU[ 0 ], tasks_CPU.size() );
			profilerWindow.gpuGraph.LoadFrameData( &tasks_GPU[ 0 ], tasks_GPU.size() );
			profilerWindow.Render(); // GPU graph is presented on top, CPU on bottom
		}

		// if ( showDemoWindow ) ImGui::ShowDemoWindow( &showDemoWindow );
		QuitConf( &quitConfirm ); // show quit confirm window, if triggered
	}

	void ComputePasses () {
		ZoneScoped;

		{ // propagate data up through the mips
			scopedTimer Start( "MIP" );
			AdamUpdate( icarusState );
		}

		{ // the mipchain generated by Adam goes into the postprocessing step
			scopedTimer Start( "Post" );
			PostProcess( icarusState );
		}

		{ // this samples the prepared image, and gives the click and drag interface
			// this will probably move to a function
			scopedTimer Start( "Drawing" );

			const GLuint shader = icarusState.DrawShader;
			glUseProgram( shader );

			// use this for some time varying seeding type thing, maybe
			glUniform1f( glGetUniformLocation( shader, "time" ), SDL_GetTicks() / 1600.0f );

			glUniform2f( glGetUniformLocation( shader, "offset" ), viewerState.offset.x, viewerState.offset.y );
			glUniform1f( glGetUniformLocation( shader, "scale" ), viewerState.scale );

			textureManager.BindImageForShader( "Accumulator", "accumulator", shader, 0 );
			textureManager.BindTexForShader( "Output Buffer", "outputBuffer", shader, 1 );

			glDispatchCompute( ( config.width + 15 ) / 16, ( config.height + 15 ) / 16, 1 );
			glMemoryBarrier( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT );
		}

		{	// this is now basically just a passthrough... extra copy? might make more sense to drop this and do it in a more straightforward way
				// not important at this stage
			scopedTimer Start( "Postprocess" );
			bindSets[ "Postprocessing" ].apply();
			glUseProgram( shaders[ "Tonemap" ] );

			// SendTonemappingParameters should take an argument, "passthrough", defaulting to false (doesn't break existing usage)
				// this simplifies usage for environments like this, where I have prepped image data I want to present faithfully
			SendTonemappingParameters( true );

			glDispatchCompute( ( config.width + 15 ) / 16, ( config.height + 15 ) / 16, 1 );
			glMemoryBarrier( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT );
		}

		// this will stay very similiar
		{ // text rendering timestamp - required texture binds are handled internally
			scopedTimer Start( "Text Rendering" );
			textRenderer.Clear();
			textRenderer.Update( ImGui::GetIO().DeltaTime );

			// show terminal, if active - check happens inside
			textRenderer.drawTerminal( terminal );

			// put the result on the display
			textRenderer.Draw( textureManager.Get( "Display Texture" ) );
			glMemoryBarrier( GL_SHADER_IMAGE_ACCESS_BARRIER_BIT );
		}
	}

	vector< ivec2 > offsets;
	void OnUpdate () {
		ZoneScoped; scopedTimer Start( "Update" );

		// write some pixels
		if ( offsets.size() == 0 ) {
			// clearing the color and count buffers

			textureManager.ZeroTexture2D( "Adam" );

			// get a new set of offsets
			const int w = icarusState.dimensions.x;
			const int h = icarusState.dimensions.y;

			for ( int x = 0; x < w; x++ ) {
				for ( int y = 0; y < h; y++ ) {
					offsets.push_back( ivec2( x, y ) );
				}
			}
			// shuffle it around a bit
			static auto rng = std::default_random_engine {};
			std::shuffle( std::begin( offsets ), std::end( offsets ), rng );
			std::shuffle( std::begin( offsets ), std::end( offsets ), rng );
			std::shuffle( std::begin( offsets ), std::end( offsets ), rng );
		} else {
			for ( int i = 0; i < 512; i++ ) {
				// write data for one more pixel, at that offset...
				ivec2 loc = offsets[ offsets.size() - 1 ];

				// put a color sample of a circular mask into the pixel for the color...
				rng col = rng( 0.0f, 1.0f );
				vec4 dataC = ( fmod( glm::distance( vec2( loc ), vec2( icarusState.dimensions.x / 2.0f, icarusState.dimensions.y / 2.0f ) ), 100.0f ) < 35.0f ) ? vec4( ( loc.x % 80 < 40 ) ? 0.0f : 1.0f, col(), ( loc.x % 80 < 40 ) ? 1.0f : 0.0f, 1.0f ) : vec4( 0.0f, 0.0f, 0.0f, 1.0f );

				// static Image_4F testImage( "test2.png" );
				// Image_4F::color col = testImage.GetAtXY( loc.x, loc.y );
				// vec4 dataC = vec4( col[ red ], col[ green ], col[ blue ], 1.0f );

				glBindTexture( GL_TEXTURE_2D, icarusState.textureManager->Get( "Adam" ) );
				glTexSubImage2D( GL_TEXTURE_2D, 0, loc.x, loc.y, 1, 1, getFormat( GL_RGBA32F ), GL_FLOAT, &dataC );

				// pop that entry off the list
				offsets.pop_back();
			}
		}

	}

	void OnRender () {
		ZoneScoped;
		ClearColorAndDepth();		// if I just disable depth testing, this can disappear
		ComputePasses();			// multistage update of displayTexture
		BlitToScreen();				// fullscreen triangle copying to the screen
		{
			scopedTimer Start( "ImGUI Pass" );
			ImguiFrameStart();		// start the imgui frame
			ImguiPass();			// do all the gui stuff
			ImguiFrameEnd();		// finish imgui frame and put it in the framebuffer
		}
		window.Swap();				// show what has just been drawn to the back buffer
	}

	bool MainLoop () { // this is what's called from the loop in main
		ZoneScoped;

		// get new data into the input handler
		inputHandler.update();

		// pass any signals into the terminal
		terminal.update( inputHandler );

		// event handling
		HandleCustomEvents();

		// derived-class-specific functionality
		OnUpdate();
		OnRender();

		FrameMark; // tells tracy that this is the end of a frame
		PrepareProfilingData(); // get profiling data ready for next frame
		return pQuit;
	}
};